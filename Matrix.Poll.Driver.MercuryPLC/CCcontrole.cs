using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Matrix.Poll.Driver.MercuryPLC
{
    public partial class Driver
    {
        public UInt16 Decoder(byte[] b)
        {
            UInt16 arg = BitConverter.ToUInt16(b, 0);
            byte[] CMatrix = new byte[8] { 0xd4, 0xa9, 0x53, 0xa6, 0x4d, 0x9a, 0x35, 0x6a };

            byte[] ucSyndromes = new byte[256] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x10, 0xff, 0x0a, 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0xff, 0xff, 0x00, 0xff, 0x20, 0xff, 0xff, 0xff, 0x14, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x40, 0x08, 0x90, 0x00, 0x02, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x40, 0xff, 0x22, 0x40, 0x40, 0xff, 0x40, 0xff, 0x84, 0xff, 0xff, 0x28, 0x40, 0xff, 0xff, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0xff, 0xff, 0x00, 0x10, 0x80, 0xff, 0x10, 0x10, 0x21, 0x10, 0x00, 0x04, 0x04, 0x04, 0x01, 0xff, 0xff, 0x04, 0xff, 0xff, 0xff, 0x04, 0xff, 0x10, 0xff, 0xc0, 0x00, 0xff, 0x80, 0xff, 0xff, 0xff, 0x44, 0xff, 0x80, 0xff, 0x80, 0x80, 0xff, 0x10, 0x80, 0xff, 0xff, 0xff, 0x09, 0x04, 0xff, 0x40, 0xff, 0xff, 0x50, 0xff, 0x80, 0xff, 0xff, 0x03, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x08, 0x05, 0x00, 0x02, 0x20, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x20, 0x48, 0x01, 0xff, 0xff, 0xff, 0x20, 0x11, 0x20, 0x20, 0x42, 0xff, 0x20, 0xff, 0x00, 0x02, 0x08, 0xff, 0x08, 0xff, 0x08, 0x08, 0x02, 0x02, 0xff, 0x02, 0xff, 0x02, 0x08, 0x60, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x08, 0xff, 0xff, 0x02, 0x20, 0xff, 0xff, 0xff, 0x81, 0xff, 0x00, 0xff, 0xff, 0x82, 0x01, 0xff, 0xff, 0xff, 0xff, 0x24, 0xff, 0xff, 0x88, 0x10, 0xff, 0xff, 0x01, 0xff, 0xff, 0x04, 0x01, 0x01, 0x01, 0x30, 0xff, 0xff, 0x20, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0x41, 0xff, 0xff, 0x12, 0xff, 0x08, 0xff, 0xff, 0x02, 0x80, 0x18, 0xff, 0xff, 0xff, 0xff, 0xa0, 0xff, 0xff, 0xff, 0x01, 0x0c, 0xff, 0xff, 0xff, 0xff, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff };    // end of ucSyndromes[]

            int i;

            UInt16 res, sft;

            res = 0;
            sft = arg;

            for (i = 0; i < 8; i++)
            {
                if ((sft & 1) > 0)
                {
                    res ^= CMatrix[i];
                }
                sft >>= 1;
            }

            res ^= sft;

            res = ucSyndromes[res];

            if (res == 0xff)
            {
                arg = 0x8000;
            }
            else
            {
                arg = (ushort)((arg ^ res) & 0x00ff);
            }
            UInt16 tmp = (arg != 0x8000) ? (UInt16)((b[1] << 8) + arg) : arg;
            return tmp;
        }
        public bool isTableCoder(UInt16 code)
        {
            bool istablecoder = false;
            UInt16[] codes = new UInt16[] {
                0x0000, 0xd401, 0xa902, 0x7d03, 0x5304, 0x8705, 0xfa06, 0x2e07, 0xa608, 0x7209, 0x0f0a, 0xdb0b, 0xf50c, 0x210d, 0x5c0e, 0x880f,
                0x4d10, 0x9911, 0xe412, 0x3013, 0x1e14, 0xca15, 0xb716, 0x6317, 0xeb18, 0x3f19, 0x421a, 0x961b, 0xb81c, 0x6c1d, 0x111e, 0xc51f,
                0x9a20, 0x4e21, 0x3322, 0xe723, 0xc924, 0x1d25, 0x6026, 0xb427, 0x3c28, 0xe829, 0x952a, 0x412b, 0x6f2c, 0xbb2d, 0xc62e, 0x122f,
                0xd730, 0x0331, 0x7e32, 0xaa33, 0x8434, 0x5035, 0x2d36, 0xf937, 0x7138, 0xa539, 0xd83a, 0x0c3b, 0x223c, 0xf63d, 0x8b3e, 0x5f3f,
                0x3540, 0xe141, 0x9c42, 0x4843, 0x6644, 0xb245, 0xcf46, 0x1b47, 0x9348, 0x4749, 0x3a4a, 0xee4b, 0xc04c, 0x144d, 0x694e, 0xbd4f,
                0x7850, 0xac51, 0xd152, 0x0553, 0x2b54, 0xff55, 0x8256, 0x5657, 0xde58, 0x0a59, 0x775a, 0xa35b, 0x8d5c, 0x595d, 0x245e, 0xf05f,
                0xaf60, 0x7b61, 0x0662, 0xd263, 0xfc64, 0x2865, 0x5566, 0x8167, 0x0968, 0xdd69, 0xa06a, 0x746b, 0x5a6c, 0x8e6d, 0xf36e, 0x276f,
                0xe270, 0x3671, 0x4b72, 0x9f73, 0xb174, 0x6575, 0x1876, 0xcc77, 0x4478, 0x9079, 0xed7a, 0x397b, 0x177c, 0xc37d, 0xbe7e, 0x6a7f,
                0x6a80, 0xbe81, 0xc382, 0x1783, 0x3984, 0xed85, 0x9086, 0x4487, 0xcc88, 0x1889, 0x658a, 0xb18b, 0x9f8c, 0x4b8d, 0x368e, 0xe28f,
                0x2790, 0xf391, 0x8e92, 0x5a93, 0x7494, 0xa095, 0xdd96, 0x0997, 0x8198, 0x5599, 0x289a, 0xfc9b, 0xd29c, 0x069d, 0x7b9e, 0xaf9f,
                0xf0a0, 0x24a1, 0x59a2, 0x8da3, 0xa3a4, 0x77a5, 0x0aa6, 0xdea7, 0x56a8, 0x82a9, 0xffaa, 0x2bab, 0x05ac, 0xd1ad, 0xacae, 0x78af,
                0xbdb0, 0x69b1, 0x14b2, 0xc0b3, 0xeeb4, 0x3ab5, 0x47b6, 0x93b7, 0x1bb8, 0xcfb9, 0xb2ba, 0x66bb, 0x48bc, 0x9cbd, 0xe1be, 0x35bf,
                0x5fc0, 0x8bc1, 0xf6c2, 0x22c3, 0x0cc4, 0xd8c5, 0xa5c6, 0x71c7, 0xf9c8, 0x2dc9, 0x50ca, 0x84cb, 0xaacc, 0x7ecd, 0x03ce, 0xd7cf,
                0x12d0, 0xc6d1, 0xbbd2, 0x6fd3, 0x41d4, 0x95d5, 0xe8d6, 0x3cd7, 0xb4d8, 0x60d9, 0x1dda, 0xc9db, 0xe7dc, 0x33dd, 0x4ede, 0x9adf,
                0xc5e0, 0x11e1, 0x6ce2, 0xb8e3, 0x96e4, 0x42e5, 0x3fe6, 0xebe7, 0x63e8, 0xb7e9, 0xcaea, 0x1eeb, 0x30ec, 0xe4ed, 0x99ee, 0x4def,
                0x88f0, 0x5cf1, 0x21f2, 0xf5f3, 0xdbf4, 0x0ff5, 0x72f6, 0xa6f7, 0x2ef8, 0xfaf9, 0x87fa, 0x53fb, 0x7dfc, 0xa9fd, 0xd4fe, 0x00ff
            };    // end of codes[256]
            for (int i = 0; i < codes.Length; i++)
            {
                if (codes[i] == code)
                    istablecoder = true;
            }
            return istablecoder;
        }
    }
}
